'use strict';

import gulp                 from 'gulp';
import webpack              from 'webpack';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';
import colorsSupported      from 'supports-color';
import historyApiFallback   from 'connect-history-api-fallback';
import browserSync          from 'browser-sync';
import gulpLoadPlugins      from 'gulp-load-plugins';
import ngConstant           from 'gulp-ng-constant';
const $ = gulpLoadPlugins();

const config = {
    app: 'app/renderer',
    tmp: '.tmp',
    dist: 'build/electron',
    constantTemplate:
    'angular.module(\'<%- moduleName %>\', [])' +
    '<% constants.forEach(function(constant) { %>.constant(\'<%- constant.name %>\', <%= constant.value %>)\n<% }) %>;\n' +
    '    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n'
};

gulp.task('ngconstant:dev',  () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'dev'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('ngconstant:prod', () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'prod'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});


gulp.task('webpack', ['ngconstant:prod', 'compile']);

gulp.task('compile', () => {
    let config = require('./webpack.dist.config');

    return new Promise((resolve) => {
        webpack(config, (err, stats) => { webpackThen(err,stats); resolve();});
    });
});

gulp.task('serve', ['ngconstant:dev'], () => {
    const config = require('./webpack.dev.config');

    const compiler = webpack(config);

    /**
     * to avoid console logging
     * comment pouchdb debug logger in pouchdb.service.js
     * and print in console browser
     *
     * > localStorage.debug = ''
     *
     * then reload browser
     */
    browserSync({
        port: process.env.PORT || 3000,
        open: true,
        server: {baseDir: './'},
        middleware: [
            historyApiFallback(),
            webpackDevMiddleware(compiler, {
                stats: {
                    colors: colorsSupported,
                    chunks: false,
                    modules: false
                },
                publicPath: config.output.publicPath
            }),
            webpackHotMiddleware(compiler)
        ]
    });
});

function webpackThen(err, stats) {
    if (err) {
        throw new $.util.PluginError("webpack", err);
    }

    $.util.log("[webpack]", stats.toString({
        colors: colorsSupported,
        chunks: false,
        errorDetails: true
    }));
}

gulp.task('default', ['serve']);
