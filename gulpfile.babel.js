'use strict';

import gulp     from 'gulp';
import webpack  from 'webpack';
import path     from 'path';
import browserSync from 'browser-sync';
import del      from 'del';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';
import colorsSupported      from 'supports-color';
import historyApiFallback   from 'connect-history-api-fallback';
import karma from 'karma';
import ngConstant from 'gulp-ng-constant';
import gulpLoadPlugins from 'gulp-load-plugins';
import electronCo from 'electron-connect';

const electronConnect = electronCo.server.create();
const $ = gulpLoadPlugins();

const config = {
    app: 'app/',
    main:'app/server/**.js',
    tmp: '.tmp',
    dist: 'build/electron',
    constantTemplate:
    'angular.module(\'<%- moduleName %>\', [])' +
    '<% constants.forEach(function(constant) { %>.constant(\'<%- constant.name %>\', <%= constant.value %>)\n<% }) %>;\n' +
    '    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n'
};

let root = './';

// map of all paths
let paths = {
  entry: [
    'babel-polyfill',
    path.join(__dirname, root, 'app/app.bootstrap.js')
  ],
  output: root,
  blankTemplates: path.join(__dirname, 'generator', 'component/**/*.**'),
  dest: path.join(__dirname, 'dist')
};

gulp.task('ngconstant:dev',  () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'dev'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('ngconstant:test',  () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'test'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('ngconstant:prod', () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'prod'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('script:main-dev', () => {
    return gulp.src(config.main)
        .pipe($.plumber())
        .pipe($.babel())
        .pipe(gulp.dest(config.tmp));
});

gulp.task('script:main-prod', () => {
    return gulp.src(config.main)
        .pipe($.plumber())
        .pipe($.babel())
        .pipe(gulp.dest(config.dist));
});

gulp.task('clean', (cb) => {
  del([paths.dest]).then(function (paths) {
    $.util.log("[clean]", paths);
    cb();
  })
});

const Server = karma.Server;

gulp.task('karma', ['ngconstant:test'],(done) => {
    new Server({
        configFile: __dirname + '/karma.conf.js'
    },  () => {
        done();
    }).start();
});

gulp.task('test', ['karma', 'ngconstant:test'], () => {

    process.env.NODE_ENV = 'test';

    return gulp.src(['test/database/**/*.js'], { read: false })
        .pipe($.mocha({ reporter: 'spec' }))
        .on('error', $.util.log);
});

gulp.task('webpack', ['clean', 'ngconstant:prod', 'script:main-prod'], (cb) => {

    const config = require('./webpack.dist.config');
    config.entry.app = paths.entry;

    webpack(config, (err, stats) => {
        if(err)  {
            throw new $.util.PluginError("webpack", err);
        }

        $.util.log("[webpack]", stats.toString({
            colors: colorsSupported,
            chunks: false,
            errorDetails: true
        }));
        cb();
    });

});

gulp.task('serve', ['ngconstant:dev'], () => {

    const config = require('./webpack.dev.config');
    config.entry.app = [
        // this modules required to make HRM working
        // it responsible for all this webpack magic
        'webpack-hot-middleware/client?reload=true',
        // application entry point
    ].concat(paths.entry);

    var compiler = webpack(config);

    browserSync({
        port: process.env.PORT || 3000,
        open: false,
        server: {baseDir: root},
        middleware: [
            historyApiFallback(),
            webpackDevMiddleware(compiler, {
                stats: {
                    colors: colorsSupported,
                    chunks: false,
                    modules: false
                },
                publicPath: config.output.publicPath
            }),
            webpackHotMiddleware(compiler)
        ]
    });

    gulp.watch(['./app/**/*.spec.js'], ['karma', 'test']);
});

gulp.task('electron-dev', ['ngconstant:dev', 'script:main-dev', 'compile'],() => {
    process.env.NODE_ENV = 'dev';
    electronConnect.start();

    gulp.watch(['app/**/*.*', '!app/server/*'], () => {
        gulp.start('compile', electronConnect.restart);
    });
    gulp.watch(['app/server/*.js'], () => {
        gulp.start('script:main-dev', electronConnect.restart);
    })
});

gulp.task('compile', [], (cb) => {
    const config = require('./webpack.dev.config');
    config.entry.app = paths.entry;

    webpack(config, (err, stats) => {
        if (err) {
            throw new $.util.PluginError("webpack", err);
        }

        $.util.log("[webpack]", stats.toString({
            colors: colorsSupported,
            chunks: false,
            errorDetails: true
        }));

        cb();
    })
});

gulp.task('default', ['serve']);
