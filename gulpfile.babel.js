'use strict';

import gulp     from 'gulp';
import webpack  from 'webpack';
import path     from 'path';
import browserSync from 'browser-sync';
import del      from 'del';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';
import colorsSupported      from 'supports-color';
import historyApiFallback   from 'connect-history-api-fallback';
import karma from 'karma';
import ngConstant from 'gulp-ng-constant';
import gulpLoadPlugins from 'gulp-load-plugins';
import electronCo from 'electron-connect';

const electronConnect = electronCo.server.create();
const $ = gulpLoadPlugins();

const config = {
    app: 'app/renderer',
    tmp: '.tmp',
    dist: 'build/electron',
    constantTemplate:
    'angular.module(\'<%- moduleName %>\', [])' +
    '<% constants.forEach(function(constant) { %>.constant(\'<%- constant.name %>\', <%= constant.value %>)\n<% }) %>;\n' +
    '    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n'
};


gulp.task('ngconstant:dev',  () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'dev'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('ngconstant:test',  () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'test'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('ngconstant:prod', () => {
    return ngConstant({
        name: 'EnvModule',
        constants: {
            ENV: 'prod'
        },
        template: config.constantTemplate,
        stream: true
    })
        .pipe($.rename('app.constants.js'))
        .pipe(gulp.dest(config.app));
});

gulp.task('clean', (cb) => {
  del([paths.dest]).then(function (paths) {
    $.util.log("[clean]", paths);
    cb();
  })
});

const Server = karma.Server;

gulp.task('karma', ['ngconstant:test'],(done) => {
    new Server({
        configFile: __dirname + '/karma.conf.js'
    },  () => {
        done();
    }).start();
});

gulp.task('test', ['karma', 'ngconstant:test'], () => {

    process.env.NODE_ENV = 'test';

    return gulp.src(['test/database/**/*.js'], { read: false })
        .pipe($.mocha({ reporter: 'spec' }))
        .on('error', $.util.log);
});

gulp.task('webpack', ['clean', 'ngconstant:prod', 'compile-main', 'compile-renderer'], (cb) => {

    const mainConfig = require('./webpack.main.dist.config');
    const rendererConfig = require('./webpack.renderer.dist.config');


    webpack(config, (err, stats) => {
        if(err)  {
            throw new $.util.PluginError("webpack", err);
        }

        $.util.log("[webpack]", stats.toString({
            colors: colorsSupported,
            chunks: false,
            errorDetails: true
        }));
        cb();
    });

});

gulp.task('electron-dev', ['ngconstant:dev', 'compile'],() => {
    process.env.NODE_ENV = 'dev';
    electronConnect.start();

    gulp.watch(['app/**/*.*'], () => {
        gulp.start('compile', electronConnect.restart);
    });
});

import webpackDevConfig from './webpack.dev.config';

gulp.task('compile', () => {


    return new Promise((resolve) => {
        webpack(webpackDevConfig, (err, stats) => { webpackThen(err,stats); resolve();});
    });
});


function webpackThen(err, stats) {
    if (err) {
        throw new $.util.PluginError("webpack", err);
    }

    $.util.log("[webpack]", stats.toString({
        colors: colorsSupported,
        chunks: false,
        errorDetails: true
    }));
}

gulp.task('default', ['serve']);
